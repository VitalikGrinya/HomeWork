namespace GladiatorsFights
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Battle battle = new Battle();
            battle.Fight();
        }
    }

    abstract class Warrior
    {
        public Warrior(string name, int health, int damage)
        {
            Name = name;
            Health = health;
            Damage = damage;
        }

        public string Ability { get; protected set; }
        public string Name { get; protected set; }
        public int Id { get; protected set; }
        public int Health { get; protected set; }
        public int Damage { get; protected set; }
        public int AttackNumber { get; protected set; }
        public int Mana { get; protected set; }

        public abstract Warrior Clone();

        public virtual void ShowGladiatorInfo()
        {
            Console.WriteLine($"{Id}. {Name}. Здоровье - {Health}. Сила - {Damage}.\n{Ability}.");
        }

        public virtual void TakeDamage(int damage)
        {
            int minHealthValue = 0;

            Health -= damage;

            if (Health < minHealthValue)
            {
                Health = minHealthValue;
            }
        }

        public virtual void Attack(Warrior warrior) { }

        public virtual void UseAbility() { }
    }

    class Assassin : Warrior
    {
        public Assassin(string name, int health, int damage) : base(name, health, damage)
        {
            Id = 1;
            Name = name;
            Health = health;
            Damage = damage;
            Ability = "Особая способность - Проворство. Увеличивает силу удара в два раза";
        }

        public override void Attack(Warrior warrior)
        {
            int minChanceValue = 1;
            int maxChanceValue = 3;
            int attackChance = 1;
            int individualAttack = 36;

            if (Utilites.GenerateInt(minChanceValue, maxChanceValue) != attackChance)
            {

                warrior.TakeDamage(Damage);
            }
            else
            {
                Damage = individualAttack;
                warrior.TakeDamage(Damage);
            }
        }

        public override Warrior Clone()
        {
            return new Assassin(Name, Health, Damage);
        }
    }

    class Berserk : Warrior
    {
        public Berserk(string name, int health, int damage) : base(name, health, damage)
        {
            Id = 2;
            Name = name;
            Health = health;
            Damage = damage;
            Ability = "Особая способность - Ярость. При накоплении ярости атакует дважды";
            AttackNumber = 0;
        }

        public override void Attack(Warrior warrior)
        {
            int fury = 3;

            warrior.TakeDamage(Damage);

            AttackNumber++;

            if (AttackNumber % fury == 0)
            {
                warrior.TakeDamage(Damage);
            }
        }

        public override Warrior Clone()
        {
            return new Berserk(Name, Health, Damage);
        }
    }

    class Knight : Warrior
    {
        public Knight(string name, int health, int damage) : base(name, health, damage)
        {
            Id = 3;
            Name = name;
            Health = health;
            Damage = damage;
            Ability = "Особая способность - Святая молитва. Восстанавливает часть жизней";
            AttackNumber = 1;
        }

        public override void Attack(Warrior warrior)
        {
            warrior.TakeDamage(Damage);
        }

        public override void TakeDamage(int damage)
        {
            int takeAttack = 4;
            int holyPower = 10;

            Health -= damage;
            AttackNumber++;

            if (takeAttack % AttackNumber == 0)
            {
                Health += holyPower;
            }
        }

        public override Warrior Clone()
        {
            return new Knight(Name, Health, Damage);
        }
    }

    class Samurai : Warrior
    {
        public Samurai(string name, int health, int damage) : base(name, health, damage)
        {
            Id = 4;
            Name = name;
            Health = health;
            Damage = damage;
            Ability = "Особая способность - Вихрь. Усиляет удар за счет маны.";
            Mana = 3;
        }

        public override void Attack(Warrior warrior)
        {
            int minManaValue = 0;
            int bufDamageValue = 30;
            int baseDamage = 25;

            if (Mana > minManaValue)
            {
                Damage = bufDamageValue;
                warrior.TakeDamage(Damage);
                Mana--;
            }
            else
            {
                Damage = baseDamage;
                warrior.TakeDamage(Damage);
            }
        }

        public override Warrior Clone()
        {
            return new Samurai(Name, Health, Damage);
        }
    }

    class Viking : Warrior
    {
        public Viking(string name, int health, int damage) : base(name, health, damage)
        {
            Id = 5;
            Name = name;
            Health = health;
            Damage = damage;
            Ability = "Особая способность - Уворот. Уклоняется од удара";
        }

        public override void Attack(Warrior warrior)
        {
            warrior.TakeDamage(Damage);
        }

        public override void TakeDamage(int damage)
        {
            int maxChance = 2;
            int minChance = 1;
            int evasionChance = 1;
            int minHealthValue = 0;

            if (Utilites.GenerateInt(minChance, maxChance) == evasionChance)
            {
                Health -= minHealthValue;
            }
            else
            {
                Health -= damage;
            }

        }

        public override Warrior Clone()
        {
            return new Viking(Name, Health, Damage);
        }
    }

    class Battle
    {
        private Warrior _firstWarrior;
        private Warrior _secondWarrior;

        private List<Warrior> _warriors = new List<Warrior>();

        public Battle()
        {
            CreateWariors();
        }

        private void CreateWariors()
        {
            _warriors.Add(new Assassin("Убийца", 100, 18));
            _warriors.Add(new Berserk("Берсерк", 200, 10));
            _warriors.Add(new Knight("Рыцарь", 150, 20));
            _warriors.Add(new Samurai("Самурай", 100, 25));
            _warriors.Add(new Viking("Викинг", 120, 13));
        }

        private void ShowInfo()
        {
            foreach (Warrior warrior in _warriors)
            {
                warrior.ShowGladiatorInfo();
            }
        }

        public void Fight()
        {
            bool isWorking = true;

            ShowInfo();

            while (isWorking)
            {
                if (TryChooseWarrior(out _firstWarrior) == false || TryChooseWarrior(out _secondWarrior) == false)
                {
                    Console.Write("Введено некорректное значение. Введите данные гладиаторов заново: ");
                    continue;
                }

                Console.ReadKey();

                while (_firstWarrior.Health > 0 && _secondWarrior.Health > 0)
                {
                    _firstWarrior.Attack(_secondWarrior);
                    _firstWarrior.UseAbility();
                    _secondWarrior.Attack(_firstWarrior);
                    _secondWarrior.UseAbility();
                    Console.WriteLine($"{_firstWarrior.Name} здоровье {_firstWarrior.Health} <---> {_secondWarrior.Name} здоровье {_secondWarrior.Health}");
                }

                isWorking = false;
            }

            if (_firstWarrior.Health > 0 && _secondWarrior.Health <= 0)
            {
                Console.WriteLine($"{_firstWarrior.Name} - победил.");
            }
            else if (_firstWarrior.Health <= 0 && _secondWarrior.Health > 0)
            {
                Console.WriteLine($"{_secondWarrior.Name} - победил.");
            }
            else if (_firstWarrior.Health <= 0 && _secondWarrior.Health <= 0)
            {
                Console.WriteLine("Ничья");
            }
        }

        private bool TryChooseWarrior(out Warrior warriors)
        {
            bool isWorking = true;

            warriors = null;

            while (isWorking)
            {
                Console.Write("\nГладиатор номер - ");

                string userInput = Console.ReadLine();

                if (int.TryParse(userInput, out int result))
                {
                    int index = result - 1;

                    if (index >= 0 && index < _warriors.Count)
                    {
                        warriors = _warriors[index].Clone();

                        return true;
                    }

                    return false;
                }
                else
                {
                    Console.WriteLine("Такого гладиатора нет");
                }
            }

            return false;
        }
    }

    static class Utilites
    {
        static public int GenerateInt(int minValue, int maxValue)
        {
            Random random = new Random();

            return random.Next(minValue, maxValue + 1);
        }
    }
}
