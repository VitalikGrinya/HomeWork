namespace Aquarium
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Aquariumier aquariumier = new Aquariumier();
            aquariumier.Work();
        }
    }

    class Fish
    {
        public Fish(string name, int age, int maxAge)
        {
            Name = name;
            Age = age;
            MaxAge = maxAge;
        }

        public string Name { get; private set; }
        public int Age { get; set; }
        public int MaxAge { get; private set; }

        public void ShowFishLifeCyrcle()
        {
            ShowInfo();
            Age++;

            if (Age > MaxAge)
            {
                Console.WriteLine("Рыбка уснула брюхом вверх.");
            }
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Имя рыбки - {Name}. Возраст - {Age}. Када усё - {MaxAge}");
        }
    }

    class Aquarium
    {
        private List<Fish> _fishs = new List<Fish>();

        public void AddFish()
        {
            string name;
            int minValueMaxAge = 5;
            int maxValueMaxAge = 10;
            int maxFishValue = 5;

            if (_fishs.Count == maxFishValue)
            {
                Console.WriteLine("Больше рыб добавить нельзя.");
            }
            else
            {
                int age;

                name = Utilites.ReadString("Введите имя рыбы: ");

                Console.Write("Введите возраст рыбы: ");
                string ageInput = Console.ReadLine();

                while (int.TryParse(ageInput, out age) == false)
                {
                    Console.WriteLine("Что-то пошло не так, попробуйте еще раз.");
                    ageInput = Console.ReadLine();
                }

                int maxAge = Utilites.GenerateInt(minValueMaxAge, maxValueMaxAge);

                Fish fish = new Fish(name, age, maxAge);
                _fishs.Add(fish);

                Console.WriteLine("Рыбка добавлена в аквариум.");
                ShowFishsLife();
                RemoveDeadFish();
            }
        }

        public void WatchFish()
        {
            int symbolLenth = 65;
            char symbol = '-';
            Console.Clear();

            while (_fishs.Count > 0)
            {
                Thread.Sleep(500);
                ShowFishsLife();
                Console.WriteLine(new string(symbol, symbolLenth));
                RemoveDeadFish();
            }
        }

        public void ShowFishsLife()
        {
            foreach(Fish fish in _fishs)
            {
                fish.ShowFishLifeCyrcle();
            }
        }

        private void RemoveDeadFish()
        {
            while (TryGetToRemoveDeadFish(out Fish fish) == true)
            {
                _fishs.Remove(fish);
            }
        }

        private bool TryGetToRemoveDeadFish(out Fish fish)
        {
            fish = _fishs.Find(fish => fish.Age > fish.MaxAge);

            return fish != null;
        }
    }

    class Aquariumier
    {
        private Aquarium _aquarium = new Aquarium();

        public void Work()
        {
            const string AddFishCommand = "1";
            const string WatchFishCommand = "2";
            const string ForgetFishCommand = "3";

            bool isWorking = true;

            Console.WriteLine($"Чтобы добавить рыбу, нажмите - {AddFishCommand}.\n" +
                              $"Чтобы наблюдать за ростом рыб, нажмите - {WatchFishCommand}.\n" +
                              $"Чтобы выйти из программы и забить на рыб, нажмите - {ForgetFishCommand}.");

            while (isWorking)
            {
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case AddFishCommand:
                        _aquarium.AddFish();
                        break;

                    case WatchFishCommand:
                        _aquarium.WatchFish();
                        break;

                    case ForgetFishCommand:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine("Введена неверная команда, попробуй еще раз.");
                        break;
                }
            }
        }
    }


    static class Utilites
    {
        private static Random s_random = new Random();

        public static int GenerateInt(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }

        public static string ReadString(string message)
        {
            bool isWorking;

            string value;

            do
            {
                Console.Write(message);
                value = Console.ReadLine();

                if (string.IsNullOrWhiteSpace(value))
                {
                    isWorking = false;
                }
                else
                {
                    isWorking = true;
                }
            }
            while (isWorking == false);

            return value;
        }
    }
}
