namespace War
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Fight fight = new Fight();
            fight.Battle();
        }
    }

    abstract class Warrior
    {
        public Warrior(string name, int health, int damage)
        {
            Name = name;
            Health = health;
            Damage = damage;
        }

        public string Name { get; protected set; }
        public int Health { get; protected set; }
        public int Damage { get; protected set; }
        public string Ability { get; protected set; }

        public virtual void ShowSoliderInfo()
        {
            Console.WriteLine($"{Name} здоровье - {Health}, урон - {Damage}\n{Ability}\n");
        }

        public virtual void TakeDamage(int damage)
        {
            Health -= damage;

            if (Health < 0)
            {
                Health = 0;
            }
        }

        public virtual void Attack(Warrior warrior) { }
    }

    class Dragon : Warrior
    {
        public Dragon(string name, int health, int damage) : base(name, health, damage)
        {
            Ability = "Дыхание дракона. Урон огнем и последующее горение.";
        }

        public override void Attack(Warrior warrior)
        {
            int minChanceValue = 1;
            int maxChanceValue = 3;
            int chanceValue = 1;
            int burn = 5;

            if (Utilities.GenerateInt(minChanceValue, maxChanceValue) == chanceValue)
            {
                warrior.TakeDamage(Damage);
                Damage -= burn;

                warrior.TakeDamage(Damage);
                Damage += burn;
            }
            else
            {
                warrior.TakeDamage(Damage);
            }
        }
    }

    class Witch : Warrior
    {
        public Witch(string name, int health, int damage) : base(name, health, damage)
        {
            Ability = "Заклятие. Когда осталась одна единица жизни, восстанавливается 20 единиц здоровья.";
        }

        public override void Attack(Warrior warrior)
        {
            warrior.TakeDamage(Damage);
        }

        public override void TakeDamage(int damage)
        {
            int magicHealth = 20;

            if (Health <= 1)
            {
                Health = magicHealth;
            }
            else
            {
                Health -= damage;

                if (Health < 0)
                {
                    Health = 0;
                }
            }
        }
    }

    class Goblin : Warrior
    {
        public Goblin(string name, int health, int damage) : base(name, health, damage)
        {
            Ability = "Проворство. Возможность сделать две атаки.";
        }

        public override void Attack(Warrior warrior)
        {
            int minChanceValue = 1;
            int maxChanceValue = 3;
            int chanceValue = 1;

            warrior.TakeDamage(Damage);

            if (Utilities.GenerateInt(minChanceValue, maxChanceValue) == chanceValue)
            {
                warrior.TakeDamage(Damage);
            }
        }
    }

    class Knight : Warrior
    {
        public Knight(string name, int health, int damage) : base(name, health, damage)
        {
            Ability = "Оглушение. Противник пропускает ход.";
        }

        public override void Attack(Warrior warrior)
        {
            warrior.TakeDamage(Damage);
        }

        public override void TakeDamage(int damage)
        {
            int minChanceValue = 1;
            int maxChanceValue = 4;
            int chanceValue = 1;

            if (Utilities.GenerateInt(minChanceValue, maxChanceValue) == chanceValue)
            {
                damage = 0;
                Health -= damage;
            }
            else
            {
                Health -= damage;

                if (Health < 0)
                {
                    Health = 0;
                }
            }
        }
    }

    class Pastor : Warrior
    {
        public Pastor(string name, int health, int damage) : base(name, health, damage)
        {
            Ability = "Детская травма. Вызывает детскую травму у противника, урон снижается в два раза";
        }

        public override void Attack(Warrior warrior)
        {
            warrior.TakeDamage(Damage);
        }

        public override void TakeDamage(int damage)
        {
            int minChanceValue = 1;
            int maxChanceValue = 4;
            int chanceValue = 1;
            int halfDamage = 2;

            if (Utilities.GenerateInt(minChanceValue, maxChanceValue) == chanceValue)
            {
                damage /= halfDamage;
                Health -= damage;
                damage *= halfDamage;
            }
            else
            {
                Health -= damage;

                if (Health < 0)
                {
                    Health = 0;
                }
            }
        }
    }

    class GoblinSlayer : Warrior
    {
        public GoblinSlayer(string name, int health, int damage) : base(name, health, damage)
        {
            Ability = "Отравление. Удар ядовитым клинком отнимает жизни у соперника до смерти.";
        }

        public override void Attack(Warrior warrior)
        {
            int venomAttack = 3;

            warrior.TakeDamage(Damage);

            if (warrior.Health > 0)
            {
                warrior.TakeDamage(venomAttack);
            }
        }
    }

    class Fight
    {
        private Team _redTeam = new Team();
        private Team _blueTeam = new Team();

        public void Battle()
        {
            while (_redTeam.TeamCount() > 0 && _blueTeam.TeamCount() > 0)
            {
                MakeRound();
            }

            ShowWinnerTeam();
        }

        private void MakeRound()
        {
            ShowWarriorsCountInTeam();
            
            ShowTeamsInfo();

            _redTeam.Attack(_blueTeam);
            _blueTeam.Attack(_redTeam);

            _redTeam.RemoveWarrior();
            _blueTeam.RemoveWarrior();

            Console.ReadKey();
            Console.Clear();
        }

        private void ShowWarriorsCountInTeam()
        {
            Console.WriteLine("Количество бойцов в первой команде - " + _redTeam.TeamCount());
            Console.WriteLine("Количество бойцов во второй команде - " + _blueTeam.TeamCount());
        }

        private void ShowTeamsInfo()
        {
            char symbol = '=';

            int symbolLength = 80;

            Console.WriteLine("\nПервая команда: ");
            _redTeam.ShowInfo();

            Console.WriteLine(new string(symbol, symbolLength));

            Console.WriteLine("\nВторая команда: ");
            _blueTeam.ShowInfo();

            Console.WriteLine(new string(symbol, symbolLength));
        }

        private void ShowWinnerTeam()
        {
            if (_redTeam.TeamCount() == 0 && _blueTeam.TeamCount() == 0)
            {
                Console.WriteLine("Штош ничья получается Т_Т");
            }
            else if (_blueTeam.TeamCount() == 0)
            {
                Console.WriteLine("\nПобеждает первая команда >:3");
            }
            else if (_redTeam.TeamCount() == 0)
            {
                Console.WriteLine("\nПобеждает вторая команда O:)");
            }
        }
    }

    class Team
    {
        private List<Warrior> _warriors = new List<Warrior>();

        public Team()
        {
            CreateWarriors();
        }

        public void ShowInfo()
        {
            foreach (Warrior warrior in _warriors)
            {
                warrior.ShowSoliderInfo();
            }
        }

        public int TeamCount() { return _warriors.Count; }

        public void Attack(Team enemyTeam)
        {
            for (int i = 0; i < _warriors.Count; i++)
            {
                Warrior enemy = enemyTeam.GenerateRandomWarriorInTeam();
                _warriors[i].Attack(enemy);
            }
        }

        public Warrior GenerateRandomWarriorInTeam()
        {
            int minIndexWarrior = 0;
            int maxIndexWarrior = _warriors.Count;

            int randomIndexWarrior = Utilities.GenerateInt(minIndexWarrior, maxIndexWarrior);

            return _warriors[randomIndexWarrior];
        }

        public void RemoveWarrior()
        {
            for (int i = _warriors.Count - 1; i >= 0; i--)
            {
                if (_warriors[i].Health <= 0)
                {
                    _warriors.Remove(_warriors[i]);
                }
            }
        }

        private void CreateWarriors()
        {
            _warriors.Add(new Dragon("Дракон", 200, 15));
            _warriors.Add(new Witch("Ведьма", 100, 8));
            _warriors.Add(new Goblin("Гоблин", 80, 10));
            _warriors.Add(new Knight("Рыцарь", 150, 15));
            _warriors.Add(new Pastor("Священник", 80, 6));
            _warriors.Add(new GoblinSlayer("Убийца гоблинов", 180, 10));
        }
    }

    static class Utilities
    {
        private static Random s_random = new Random();

        public static int GenerateInt(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }
    }
}
