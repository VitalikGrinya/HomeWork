namespace Autoservice
{
    class Program
    {
        static void Main(string[] args)
        {
            Store store = new Store();

            Service service = new Service(store);
            service.Work();
        }
    }

    class Store
    {
        private List<Detail> _storeDetail = new List<Detail>();

        public Store()
        {
            AddCarDetails();
        }

        public int StoreDetailCount => _storeDetail.Count;

        public Dictionary<Detail, int> SellStoreDetail(int storeDetailCount)
        {
            int storeDetailNumber;

            Dictionary<Detail, int> storeDetails = new Dictionary<Detail, int>();

            while (storeDetails.Count != storeDetailCount)
            {
                storeDetailNumber = Utilites.GenerateRandomNumber(_storeDetail.Count);

                if (storeDetails.ContainsKey(_storeDetail[storeDetailNumber]) == false)
                {
                    storeDetails.Add(_storeDetail[storeDetailNumber], storeDetailCount);
                }
            }

            return storeDetails;
        }

        public Detail AddCarDetail()
        {
            return _storeDetail[Utilites.GenerateRandomNumber(_storeDetail.Count)];
        }

        private void AddCarDetails()
        {
            _storeDetail.Add(new Detail("двигатель", 15000));
            _storeDetail.Add(new Detail("трансмиссия", 7000));
            _storeDetail.Add(new Detail("глушитель", 2000));
            _storeDetail.Add(new Detail("стартер", 1500));
            _storeDetail.Add(new Detail("колесо", 1000));
        }
    }

    class Service
    {
        private Dictionary<Detail, int> _store = new Dictionary<Detail, int>();

        private Queue<Car> _cars = new Queue<Car>();

        private int _money = 0;

        public Service(Store store)
        {
            CreateStoreDetailsCount(store);
            CreateCarsQueue(store);
        }

        public void Work()
        {
            const string RepairCarCommand = "1";
            const string RemoveCarCommand = "2";

            //string userInput;

            while (_cars.Count != 0 && _store.Count != 0)
            {
                Console.WriteLine($"Баланс: {_money}$.\n");
                Console.WriteLine($"Очередь: {_cars.Count}.\n");

                ShowStoreDetails();

                Console.WriteLine($"Нужно починить: {_cars.Peek().NameOfBrodenDetail}.\n");

                Console.WriteLine($"Введите номер:\n{RepairCarCommand} - обслужить;\n{RemoveCarCommand} - отказать в обслуживании.");

                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case RepairCarCommand:
                        RepairCar(_cars.Dequeue());
                        break;

                    case RemoveCarCommand:
                        RemoveCar(_cars.Dequeue());
                        break;

                    default:
                        Console.WriteLine($"Что-то пошло не так, попробуй еще раз.");
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }

            Console.WriteLine($"Общий доход {_money}$.");
        }

        private void RepairCar(Car car)
        {
            Detail chosenDetail = GetStorageDetail();

            if (car.TryAcceptNewDetail(chosenDetail))
            {
                int money = CalculateRepairPrice(chosenDetail);
                _money += money;

                RemoveStoreDetail(chosenDetail);

                Console.WriteLine($"\nВы заработали {money}$.");
            }
            else
            {
                int money = CalculateRepairPrice(chosenDetail) + car.MonetaryDamage;
                _money -= money;

                RemoveStoreDetail(chosenDetail);

                Console.WriteLine($"\nБыла заменена не та деталь. Убыток - {money}$.");
            }
        }

        private void RemoveCar(Car car)
        {
            int fine = CalculateFinePrice(car.PriceOfBrokenDetail);
            _money -= fine;

            Console.WriteLine($"\nЗа отказ в обслуживании штраф - {fine}$.");
        }

        private Detail GetStorageDetail()
        {
            string userInput = "";
            int minLengthUserInput = 4;

            Detail chosenDetail;

            while (FindDetail(out chosenDetail, userInput) == false || userInput.Length < minLengthUserInput)
            {
                Console.Write("Введите название детали: ");
                userInput = Console.ReadLine().ToLower();
            }

            return chosenDetail;
        }

        private bool FindDetail(out Detail chosenDetail, string userInput)
        {
            foreach (var storageDetail in _store)
            {
                if (storageDetail.Key.Name.Contains(userInput))
                {
                    chosenDetail = storageDetail.Key;

                    return true;
                }
            }

            chosenDetail = null;

            return false;
        }

        private int CalculateRepairPrice(Detail detail)
        {
            int percentOfCostOfCarPart = 20;
            int maxPercent = 100;

            int workPrice = detail.Price * percentOfCostOfCarPart / maxPercent;
            int repairPrice = detail.Price + workPrice;

            Console.WriteLine($"\nОбщая стоиость: {repairPrice}$. " +
                              $"(Стоимость детали - {detail.Price}$. Стоимость работы - {workPrice}$).");

            return repairPrice;
        }

        private int CalculateFinePrice(int priceOfBrokenDetail)
        {
            int detailCostPercent = 10;
            int maxPercent = 100;

            return priceOfBrokenDetail * detailCostPercent / maxPercent;
        }

        private void RemoveStoreDetail(Detail storeDetail)
        {
            _store[storeDetail] -= 1;

            if (_store[storeDetail] == 0)
            {
                _store.Remove(storeDetail);
            }
        }

        private void CreateStoreDetailsCount(Store store)
        {
            int storeDetailsCount = 5;

            _store = store.SellStoreDetail(storeDetailsCount);
        }

        private void CreateCarsQueue(Store store)
        {
            int minCarsCount = 5;
            int maxCarsCount = 10;

            int carsCount = Utilites.GenerateRandomNumber(minCarsCount, maxCarsCount);

            for (int i = 0; i < carsCount; i++)
            {
                _cars.Enqueue(new Car(store.AddCarDetail()));
            }
        }

        private void ShowStoreDetails()
        {
            Console.WriteLine("Склад: ");

            foreach (var storeDetail in _store)
            {
                Console.WriteLine($"{storeDetail.Key.Name} - {storeDetail.Key.Price}$, {storeDetail.Value} шт.");
            }
        }
    }

    class Car
    {
        private Detail _brokenDetail;
        private Detail _newDetail;

        public Car(Detail detail)
        {
            _brokenDetail = detail;

            NameOfBrodenDetail = _brokenDetail.Name;
            PriceOfBrokenDetail = _brokenDetail.Price;

            MonetaryDamage = CalculateMonetaryDamage();
        }

        public string NameOfBrodenDetail { get; private set; }
        public int PriceOfBrokenDetail { get; private set; }
        public int MonetaryDamage { get; private set; }

        public bool TryAcceptNewDetail(Detail newDetail)
        {
            if (IsRightDetail(newDetail) == true)
            {
                AcceptNewDetail(newDetail);

                return true;
            }
            else
            {
                return false;
            }
        }

        private bool IsRightDetail(Detail newDetail)
        {
            return newDetail.Name == _brokenDetail.Name;
        }

        private void AcceptNewDetail(Detail newDetail)
        {
            _brokenDetail = null;
            _newDetail = newDetail;
        }

        private int CalculateMonetaryDamage()
        {
            int percentOfCostOfCarPart = 30;
            int maxPercent = 100;

            return (_brokenDetail.Price * percentOfCostOfCarPart / maxPercent) + _brokenDetail.Price;
        }
    }

    class Detail
    {
        public Detail(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }

    static class Utilites
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumber(int max)
        {
            return s_random.Next(0, max);
        }

        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max + 1);
        }
    }
}
