namespace Database;
class Program
{
    static void Main(string[] args)
    {
        const string ShowDatabaseCommand = "1";
        const string AddPlayerCommand = "2";
        const string RemovePlayerCommand = "3";
        const string BanPlayerCommand = "4";
        const string UnbanPlayerCommand = "5";
        const string ExitCommand = "6";

        string userInput;
        bool isWorking = true;

        Database database = new Database();

        while (isWorking)
        {
            Console.WriteLine($"Введите - {ShowDatabaseCommand}, чтобы посмотреть базу данных.\n" +
                              $"Введите - {AddPlayerCommand}, чтобы добавить игрока.\n" +
                              $"Введите - {RemovePlayerCommand}, чтобы удалить игрока.\n" +
                              $"Введите - {BanPlayerCommand}, чтобы забанить игрока.\n" +
                              $"Введите - {UnbanPlayerCommand}, чтобы разбанить игрока.\n" +
                              $"Введите - {ExitCommand}, чтобы выйти из программы.");

            userInput = Console.ReadLine();

            switch (userInput)
            {
                case ShowDatabaseCommand:
                    database.ShowAllPlayers();
                    break;

                case AddPlayerCommand:
                    database.AddPlayer();
                    break;

                case RemovePlayerCommand:
                    database.RemovePlayer();
                    break;

                case BanPlayerCommand:
                    database.BanPlayer();
                    break;

                case UnbanPlayerCommand:
                    database.UnbanPlayer();
                    break;

                case ExitCommand:
                    isWorking = false;
                    break;

                default:
                    Console.WriteLine("Такой команды не существует.");
                    break;
            }
        }
    }
}

class Player
{
    public Player(int id, string name, int level, bool isBan)
    {
        Id = id;
        Name = name;
        Level = level;
        IsBanned = isBan;
    }

    public int Id { get; private set; }
    public string Name { get; private set; }
    public int Level { get; private set; }
    public bool IsBanned { get; private set; }

    public void Ban()
    {
        IsBanned = true;
    }

    public void Unban()
    {
        IsBanned = false;
    }

    public void ShowInfo()
    {
        Console.WriteLine($"Пользователь {Name}#{Id} {Level}lvl Бан: {IsBanned}");
    }
}

class Database
{
    private List<Player> _players;

    public Database()
    {
        _players = new List<Player>();
    }

    public void ShowAllPlayers()
    {
        Console.Clear();

        if (_players.Count == 0)
        {
            ShowMessageEmptyData();
        }

        foreach (Player player in _players)
        {
            player.ShowInfo();
        }

        Console.ReadKey();
        Console.Clear();

    }

    public void AddPlayer()
    {
        string nameInput;
        bool isBan = false;
        int level;
        int id;

        Console.Clear();

        id = ReadInt();

        while(TryGetPlayer(id, out Player player))
        {
            Console.WriteLine("Пользователь с таким ID уже есть. Введите другой.");
            id = ReadInt();
        }

        Console.Write("Введите уровень игрока: ");

        level = ReadInt();

        nameInput = ReadString("Введите никнейм игрока: ", "Введено некорректное значение, попробуй еще раз.");

        Console.Clear();

        Player newPlayer = new Player(id, nameInput, level, isBan);

        _players.Add(newPlayer);

        Console.WriteLine($"Пользователь создан.");
        Console.ReadKey();
        Console.Clear();
    }

    public void RemovePlayer()
    {
        int id;

        Console.Clear();

        if (_players.Count == 0)
        {
            ShowMessageEmptyData();
        }
        else
        {
            id = ReadInt();

            if (TryGetPlayer(id, out Player player))
            {
                _players.Remove(player);
                Console.WriteLine("Пользователь удален.");
                Console.ReadKey();
                Console.Clear();
            }
            else
            {
                ShowMassegeNoPlayer();
            }
        }
    }

    public void BanPlayer()
    {
        int id;

        Console.Clear();

        if (_players.Count == 0)
        {
            ShowMessageEmptyData();
        }
        else
        {
            id = ReadInt();

            if (TryGetPlayer(id, out Player player))
            {
                player.Ban();
                Console.WriteLine("Игрок забанен.");
                Console.ReadKey();
                Console.Clear();
            }
            else
            {
                ShowMassegeNoPlayer();
            }
        }
    }

    public void UnbanPlayer()
    {
        int id;
        Console.Clear();

        if (_players.Count == 0)
        {
            ShowMessageEmptyData();
        }
        else
        {
            id = ReadInt();

            if (TryGetPlayer(id, out Player player) && player.IsBanned == true)
            {
                player.Unban();
                Console.WriteLine("Игрок разбанен.");
                Console.ReadKey();
                Console.Clear();
            }
            else
            {
                ShowMassegeNoPlayer() ;
            }
        }
    }

    private void ShowMessageEmptyData()
    {
        Console.WriteLine("База данных пуста.");
        Console.ReadKey();
        Console.Clear();
    }

    private void ShowMassegeNoPlayer()
    {
        Console.WriteLine("Пользователь с таким ID не найден.");
        Console.ReadKey();
        Console.Clear();
    }

    private bool TryGetPlayer(int id, out Player player)
    {
        player = _players.Find(player => player.Id == id);

        return player != null;
    }

    private string ReadString(string message, string errorMessage)
    {
        bool isSuccess;
        string value;

        do
        {
            Console.Write(message);
            value = Console.ReadLine();

            isSuccess = !string.IsNullOrWhiteSpace(value);

            if (isSuccess == false)
            {
                Console.WriteLine(errorMessage);
            }
        }
        while (isSuccess == false);

        return value;
    }

    private static int ReadInt()
    {
        int value;
        string userInput;

        Console.Write("Введите ID игрока: ");
        userInput = Console.ReadLine();

        while (int.TryParse(userInput, out value) == false)
        {
            Console.WriteLine("Введено некорректное значение, попробуй еще раз.");
            userInput = Console.ReadLine();
        }

        return value;
    }
}
