namespace ConfiguratorPassengersTrains
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string ConstructConfigurationCommand = "1";
            const string ExitCommand = "2";

            bool isWorking = true;

            string userInput;



            Configurator configurator = new Configurator();
            while (isWorking)
            {
                Console.WriteLine($"Для создания поезда нажмите - {ConstructConfigurationCommand}.\n" +
                                  $"Для выхода нажмите - {ExitCommand}.");
                userInput = Console.ReadLine();

                switch(userInput)
                {
                    case ConstructConfigurationCommand:
                        configurator.MakeAll();
                        break;

                    case ExitCommand:
                        isWorking = false;
                        break;
                }
            }
        }
    }

    class Direction
    {
        public Direction(string landingPoint, string disembarkationPoint)
        {
            LandingPoint = landingPoint;
            DisembarkationPoint = disembarkationPoint;
        }

        public string LandingPoint { get; private set; }
        public string DisembarkationPoint { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"Поезд межрегиональных линий экономкласса: {LandingPoint} - {DisembarkationPoint}");
        }
    }

    class Configurator
    {
        public void CreateDirection()
        {
            string inputLandingPiont;
            string inputDisembarkationPiont;
            bool isWorking = true;

            while(isWorking)
            {
                inputLandingPiont = ReadString("Откуда вы хотите ехать: ");

                inputDisembarkationPiont = ReadString("Куда вы хотите ехать: ");

                if(inputLandingPiont == inputDisembarkationPiont)
                {
                    Console.WriteLine("Вы уже находитесь в этом месте.");
                }
                else
                {
                    Direction direction = new Direction(inputLandingPiont, inputDisembarkationPiont);
                    direction.ShowInfo();
                    break;
                }

            }

        }

        public void SellTicket()
        {
            Random random = new Random();

            int passengersCount;
            int minPassengersCount = 1;
            int maxPassengersCount = 1000;
            
            passengersCount = random.Next(minPassengersCount, maxPassengersCount + 1);
            Console.WriteLine("Количество пассажиров в поезде: " + passengersCount);

            CreateTrain(passengersCount);
        }

        public void CreateTrain(int value)
        {
            Random random = new Random();

            int minnCarrigeCount = 30;
            int maxnCarrigeCount = 60;
            int carrigeCount;
            int extraCarrige = 1;
            int trainCount;

            carrigeCount= random.Next(minnCarrigeCount, maxnCarrigeCount+1);
            trainCount = (value / carrigeCount) + extraCarrige;

            Console.WriteLine($"Количество вагонов: {trainCount}.");
            
        }

        public void GetTrain()
        {
            Console.WriteLine("Поезд уехал.");
            Console.ReadKey();
            Console.Clear();
        }

        public void MakeAll()
        {
            CreateDirection();
            SellTicket();
            GetTrain();
        }

        private string ReadString(string message)
        {
            bool isSuccess;
            string value;

            do
            {
                Console.Write(message);
                value = Console.ReadLine().ToUpper();

                isSuccess = !string.IsNullOrWhiteSpace(value);
            }
            while (isSuccess == false);

            return value;
        }
    }
}
