namespace supermarket
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Supermarket supermarket = new Supermarket();
            supermarket.Work();
        }
    }

    class Customer
    {
        private List<Product> _products;

        public Customer(int money)
        {
            Money = money;
            _products = new List<Product>();
        }

        public int Money { get; private set; }

        public void FillBasket(List<Product> products)
        {
            int minProductsCount = 0;
            int minProducts = 1;
            int maxProducts = 5;

            int countProducts = Utilities.GenerateInt(minProducts, maxProducts + 1);

            for (int i = 0; i < countProducts; i++)
            {
                _products.Add(products[Utilities.GenerateInt(minProductsCount, products.Count)]);
            }
        }

        public bool TryPay()
        {
            while (CalculateTotalPrice() > Money)
            {
                RemoveRandomProduct();
            }

            return true;
        }

        public int Pay()
        {
            int totalPrice = CalculateTotalPrice();
            Money -= totalPrice;

            Console.WriteLine("Следующий.");

            return totalPrice;
        }

        private int CalculateTotalPrice()
        {
            int sum = 0;

            for (int i = 0; i < _products.Count; i++)
            {
                sum += _products[i].Price;
            }

            return sum;
        }

        private void RemoveRandomProduct()
        {
            int minProductsCount = 0;

            int randomIndex = Utilities.GenerateInt(minProductsCount, _products.Count);

            Product product = _products[randomIndex];
            Console.WriteLine($"Покупатель убирает товар: {product.Name}");
            _products.Remove(product);
        }
    }

    class Supermarket
    {
        private Queue<Customer> _customers = new Queue<Customer>();
        private List<Product> _products;
        private int _money = 0;

        public Supermarket()
        {
            _products = new List<Product>()
            {
                new Product("Молоко", 100),
                new Product("Сало", 150),
                new Product("Хлеб", 20),
                new Product("Лук", 15),
                new Product("Девяток яиц", 250),
                new Product("Борщ", 450)
            };
        }

        public void Work()
        {
            int lineLength = 37;
            char lineUnit = '-';

            CreateCustomersQueue();

            while (_customers.Count > 0)
            {
                Console.WriteLine($"Количество человек в очереди: {_customers.Count}.");
                Console.WriteLine();

                Customer customer = _customers.Dequeue();

                if (customer.TryPay())
                {
                    _money += customer.Pay();
                }

                Console.WriteLine(new string(lineUnit, lineLength));
            }

            Console.WriteLine($"Супермаркет заработал {_money}");
        }

        private void CreateCustomersQueue()
        {
            int minMoney = 200;
            int maxMoney = 600;

            int minCustomersCount = 5;
            int maxCustomersCount = 10;

            int customersCount = Utilities.GenerateInt(minCustomersCount, maxCustomersCount);

            for (int i = 0; i < customersCount; i++)
            {
                Customer customers = new Customer(Utilities.GenerateInt(minMoney, maxMoney));

                customers.FillBasket(_products.ToList());

                _customers.Enqueue(customers);
            }
        }
    }

    class Product
    {
        public Product(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; }
        public int Price { get; }
    }

    static class Utilities
    {
        private static Random s_random = new Random();

        public static int GenerateInt(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }
    }
}
