using System;
using System.IO;

namespace BraveNewWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            char[,] map = ReadMap("map.txt");

            ConsoleKeyInfo pressedKey;

            int heroX = 1;
            int heroY = 1;

            bool isWorking = true;

            while (isWorking)
            {
                Console.Clear();
                DrawMap(map);

                Console.SetCursorPosition(heroX, heroY);
                Console.Write("0");

                pressedKey = Console.ReadKey();

                HandleInput(pressedKey, ref heroX, ref heroY, map);
            }
        }

        static char[,] ReadMap(string text)
        {
            string[] file = File.ReadAllLines("map.txt");

            char[,] map = new char[GetMaxLengthOfLine(file), file.Length];

            for (int x = 0; x < map.GetLength(0); x++)
            {
                for (int y = 0; y < map.GetLength(1); y++)
                {
                    map[x, y] = file[y][x];
                }
            }

            return map;
        }

        private static void DrawMap(char[,] map)
        {
            for (int y = 0; y < map.GetLength(1); y++)
            {
                for (int x = 0; x < map.GetLength(0); x++)
                {
                    Console.Write(map[x, y]);
                }

                Console.WriteLine(" ");
            }
        }

        private static void HandleInput(ConsoleKeyInfo pressedKey, ref int heroX, ref int heroY, char[,] map)
        {
            int[] direction = GetDirection(pressedKey);

            int nextHeroPositionX = heroX + direction[0];
            int nextHeroPositionY = heroY + direction[1];

            char nextCell = map[nextHeroPositionX, nextHeroPositionY];

            if (nextCell == ' ' || nextCell == '*')
            {
                heroX = nextHeroPositionX;
                heroY = nextHeroPositionY;

                if (nextCell == '*')
                {
                    map[nextHeroPositionX, nextHeroPositionY] = ' ';
                }
            }
        }

        private static int[] GetDirection(ConsoleKeyInfo pressedKey)
        {
            int[] direction = { 0, 0 };

            if (pressedKey.Key == ConsoleKey.UpArrow)
            {
                direction[1] = -1;
            }
            else if (pressedKey.Key == ConsoleKey.LeftArrow)
            {
                direction[0] = -1;
            }
            else if (pressedKey.Key == ConsoleKey.DownArrow)
            {
                direction[1] = 1;
            }
            else if (pressedKey.Key == ConsoleKey.RightArrow)
            {
                direction[0] = 1;
            }

            return direction;
        }

        private static int GetMaxLengthOfLine(string[] lines)
        {
            int maxLength = lines[0].Length;

            foreach (var line in lines)
            {
                if (line.Length > maxLength)
                {
                    maxLength = line.Length;
                }
            }

            return maxLength;
        }
    }
}
