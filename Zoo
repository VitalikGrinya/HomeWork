namespace Zoo
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Application application = new Application();
            application.Work();
        }
    }

    class Application
    {
        public void Work()
        {
            int exitCommand = 0;

            bool isWorking = true;

            Cage tigersCage = new Cage("Тигры", new List<Animal>()
            {
                new Animal("Тигр","Cамец","*рычит на тигрином"),
                new Animal("Тигрица","Cамка","*рычит на тигра"),
                new Animal("Тигр","Cамец","Мой братан"),
                new Animal("Тигрица","Cамка","Ррррр")
            });

            Cage wolfsCage = new Cage("Волки", new List<Animal>()
            {
                new Animal("Волк","Самец","Ауф"),
                new Animal("Волчица","Самка","Ауууу")
            });

            Cage turtlesCage = new Cage("Черепахи", new List<Animal>()
            {
                new Animal("Черепаха","Самец","Кавабанга"),
                new Animal("Черепаха","Самец","Кавабанга"),
                new Animal("Черепаха","Самец","Кавабанга"),
                new Animal("Черепаха","Самец","Кавабанга"),
                new Animal("Крыса","Самец","Гаси толпой")
            });

            Cage parrotsCage = new Cage("Попугаи", new List<Animal>()
            {
                new Animal("Попугай","Самец","Дэжаву"),
                new Animal("Попугай","Самка","Айв джаст бин ин зис плэйс бефор"),
                new Animal("Попугай","Самка","Хайер он зе стрит"),
                new Animal("Попугай","Самка","Энд ай ноу итс май тайм ту гоу"),
            });

            Zoo zoo = new Zoo(new List<Cage>()
            {
                tigersCage,
                wolfsCage,
                turtlesCage,
                parrotsCage
            });

            while (isWorking)
            {
                Console.WriteLine($"Чтобы выйти из зоопарка, нажмите - {exitCommand}.\n" +
                                  $"Чтобы перейти к выбору вальеров, нажмите любую другую цифру.");

                string userInput = Console.ReadLine();

                if (int.TryParse(userInput, out int value))
                {
                    if (value == exitCommand)
                    {
                        isWorking = false;
                    }
                    else
                    {
                        zoo.ShowCage();
                    }
                }
                else
                {
                    Console.WriteLine("Попробуй еще раз.");
                }

                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Animal
    {
        public Animal(string name, string gender, string voice)
        {
            Name = name;
            Gender = gender;
            Voice = voice;
        }

        public string Name { get; private set; }
        public string Gender { get; private set; }
        public string Voice { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"{Name}. {Gender}. Говорит: {Voice}.");
        }
    }

    class Cage
    {
        private List<Animal> _animals = new List<Animal>();

        public Cage(string name, List<Animal> animals)
        {
            _animals = animals;
            Name = name;
        }

        public string Name { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"\nВольер: {Name}");
            ShowAnimals();
        }

        private void ShowAnimals()
        {
            ShowAnimalsCount();

            for (int i = 0; i < _animals.Count; i++)
            {
                _animals[i].ShowInfo();
            }
        }

        private void ShowAnimalsCount()
        {
            if (_animals.Count > 0)
            {
                Console.WriteLine($"В вольере  - {_animals.Count} животных.");
            }
            else
            {
                Console.WriteLine("Вольер пуст.");
            }
        }
    }

    class Zoo
    {
        private List<Cage> _cages = new List<Cage>();

        public Zoo(List<Cage> cages)
        {
            _cages = cages;
        }

        public void ShowCage()
        {
            int cageIndex;

            Console.WriteLine("Введите номер вальера, к которому хотите подойти: ");

            ShowCages();

            string userInput = Console.ReadLine();

            while (int.TryParse(userInput, out cageIndex) == false)
            {
                Console.WriteLine("Ты определенно что-то напутал.");
                userInput = Console.ReadLine();
            }

            cageIndex--;

            if (cageIndex >= _cages.Count || cageIndex < 0)
            {
                Console.WriteLine("У нас нет такого вальера.");
            }
            else
            {
                _cages[cageIndex].ShowInfo();
            }
        }

        public void ShowCages()
        {
            for (int i = 0; i < _cages.Count; i++)
            {
                Console.WriteLine((i + 1) + " " + _cages[i].Name);
            }
        }
    }
}
