namespace Zoo
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Application application = new Application();
            application.Work();
        }
    }

    class Application
    {
        public void Work()
        {
            const string ChooseTigersCageCommand = "1";
            const string ChooseWolfsCageCommand = "2";
            const string ChooseTurtlesCageCommand = "3";
            const string ExitCommand = "4";

            bool isWorking = true;

            Cage tigersCage = new Cage("Тигры", new List<Animal>()
            {
                new Animal("Тигр","Cамец","*рычит на тигрином"),
                new Animal("Тигрица","Cамка","*рычит на тигра"),
                new Animal("Тигр","Cамец","Мой братан"),
                new Animal("Тигрица","Cамка","Ррррр")
            });

            Cage wolfsCage = new Cage("Волки", new List<Animal>()
            {
                new Animal("Волк","Самец","Ауф"),
                new Animal("Волчица","Самка","Ауууу")
            });

            Cage turtlesCage = new Cage("Черепахи", new List<Animal>()
            {
                new Animal("Черепаха","Самец","Кавабанга"),
                new Animal("Черепаха","Самец","Кавабанга"),
                new Animal("Черепаха","Самец","Кавабанга"),
                new Animal("Черепаха","Самец","Кавабанга"),
                new Animal("Крыса","Самец","Гаси толпой")
            });

            Zoo zoo = new Zoo(new List<Cage>()
            {
                tigersCage,
                wolfsCage,
                turtlesCage
            });

            while (isWorking)
            {
                Console.WriteLine($"Чтобы подойти к вольеру с тиграми, нажмите - {ChooseTigersCageCommand}.\n" +
                                  $"Чтобы подойти к вольеру с волками, нажмите - {ChooseWolfsCageCommand}.\n" +
                                  $"Чтобы подойти к вольеру с черепахами, нажмите - {ChooseTurtlesCageCommand}.\n" +
                                  $"Чтобы выйти из зоопарка, нажмите - {ExitCommand}");

                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case ChooseTigersCageCommand:
                        zoo.ShowCage(userInput);
                        break;

                    case ChooseWolfsCageCommand:
                        zoo.ShowCage(userInput);
                        break;

                    case ChooseTurtlesCageCommand:
                        zoo.ShowCage(userInput);
                        break;

                    case ExitCommand:
                        isWorking = false;
                        break;

                    default:
                        Console.WriteLine("Введено некорректное условие.");
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Animal
    {
        public Animal(string name, string gender, string voice)
        {
            Name = name;
            Gender = gender;
            Voice = voice;
        }

        public string Name { get; private set; }
        public string Gender { get; private set; }
        public string Voice { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"{Name}. {Gender}. Говорит: {Voice}.");
        }
    }

    class Cage
    {
        private List<Animal> _animals = new List<Animal>();

        public Cage(string name, List<Animal> animals)
        {
            _animals = animals;
            Name = name;
        }

        public string Name { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"\nВольер: {Name}");
            AddAnimals();
        }

        private void AddAnimals()
        {
            ShowAnimalsCount();

            for (int i = 0; i < _animals.Count; i++)
            {
                _animals[i].ShowInfo();
            }
        }

        private void ShowAnimalsCount()
        {
            if (_animals.Count > 0)
            {
                Console.WriteLine($"В вольере  - {_animals.Count} животных.");
            }
            else
            {
                Console.WriteLine("Вольер пуст.");
            }
        }
    }

    class Zoo
    {
        private List<Cage> _cages = new List<Cage>();

        public Zoo(List<Cage> cages)
        {
            _cages = cages;
        }
        
        public void ShowCage(string userInput)
        {
            int cageIndex;

            while(int.TryParse(userInput, out cageIndex) == false)
            {
                Console.WriteLine("Ты определенно что-то напутал.");
                userInput= Console.ReadLine();
            }

            cageIndex--;

            _cages[cageIndex].ShowInfo();
        }
    }
}
