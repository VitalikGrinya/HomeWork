using System;

namespace GladiatorsFights
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Battle battle = new Battle();
            battle.Fight();
        }
    }

    abstract class Warrior
    {
        public string Ability { get; protected set; }
        public string Name { get; protected set; }
        public int Id { get; protected set; }
        public int Health { get; protected set; }
        public int Attack { get; protected set; }

        public abstract Warrior Clone();

        public virtual void ShowWarriors()
        {
            Console.WriteLine($"{Id}. {Name}. Здоровье - {Health}. Сила - {Attack}.\n{Ability}.");
        }

        public virtual void TakeDamage(int attack)
        {
            Health -= attack;
        }

        public virtual void MakeAttack(Warrior warrior)
        {
            warrior.TakeDamage(Attack);
            UseAbility();
        }

        public virtual void UseAbility() { }
    }

    class Assassin : Warrior
    {
        private string _name = "Убийца";
        private string _ability = "Особая способность - кровотечение отнимает 2 единицы здоровья после удара";

        private int _health = 100;
        private int _attack = 18;
        private int _id = 1;

        public Assassin()
        {
            Id = _id;
            Name = _name;
            Health = _health;
            Attack = _attack;
            Ability = _ability;
        }

        private void IndividualAbility()
        {
            Random random = new Random();

            int minChanceValue = 1;
            int maxChanceValue = 2;
            int individualAttackChance;
            int individualAttack = 5;

            individualAttackChance = random.Next(minChanceValue, maxChanceValue + 1);

            if (individualAttackChance == 1)
            {
                Attack += individualAttack;
            }
        }

        public override void UseAbility()
        {
            IndividualAbility();
        }

        public override Warrior Clone()
        {
            return new Assassin();
        }
    }

    class Berserk : Warrior
    {
        private string _name = "Берсерк";
        private string _ability = "Особая способность - при количестве жизней меньше 50% урон увеличивается в 2 раза";

        private int _health = 200;
        private int _attack = 10;
        private int _id = 2;

        public Berserk()
        {
            Id = _id;
            Name = _name;
            Health = _health;
            Attack = _attack;
            Ability = _ability;
        }

        public void IndividualAbility()
        {
            int minHealthValue = 100;
            int individualAttack = 3;

            int furyAttack = _attack * individualAttack;

            if (Health <= minHealthValue)
            {
                Attack = furyAttack;
            }
            else
            {
                Attack = _attack;
            }
        }

        public override void UseAbility()
        {
            IndividualAbility();
        }

        public override Warrior Clone()
        {
            return new Berserk();
        }
    }

    class Knight : Warrior
    {
        private string _name = "Рыцарь";
        private string _ability = "Особая способность - на грани смерти восстанавливает часть жизней";

        private int _health = 150;
        private int _attack = 20;
        private int _id = 3;

        public Knight()
        {
            Id = _id;
            Name = _name;
            Health = _health;
            Attack = _attack;
            Ability = _ability;
        }

        public void IndividualAbility()
        {
            int deathHealthValue = 0;
            int minHealthValue = 25;
            int holyPower = 40;

            if (Health <= minHealthValue && Health > deathHealthValue)
            {
                Attack = holyPower;
            }
        }

        public override void UseAbility()
        {
            IndividualAbility();
        }

        public override Warrior Clone()
        {
            return new Knight();
        }
    }

    class Samurai : Warrior
    {
        private string _name = "Самурай";
        private string _ability = "Особая способность - шанс критического урона 33%";

        private int _health = 100;
        private int _attack = 25;
        private int _id = 4;

        public Samurai()
        {
            Id = _id;
            Name = _name;
            Health = _health;
            Attack = _attack;
            Ability = _ability;
        }

        public void IndividualAbility()
        {
            Attack = _attack;

            Random random = new Random();

            int maxChance = 3;
            int minChance = 1;
            int criticalDamageChance;
            int criticalDamagePower = 2;

            criticalDamageChance = random.Next(minChance, maxChance + 1);

            if (criticalDamageChance == 1)
            {
                Attack *= criticalDamagePower;
            }
            else
            {
                Attack = _attack;
            }
        }

        public override void UseAbility()
        {
            IndividualAbility();
        }

        public override Warrior Clone()
        {
            return new Samurai();
        }
    }

    class Viking : Warrior
    {
        private string _name = "Викинг";
        private string _ability = "Особая способность - исцеляющий крик восстанавливает 6 единиц здоровья";

        private int _health = 120;
        private int _attack = 13;
        private int _id = 5;

        public Viking()
        {
            Id = _id;
            Name = _name;
            Health = _health;
            Attack = _attack;
            Ability = _ability;
        }

        public void IndividualAbility()
        {
            Random random = new Random();

            int maxChance = 3;
            int minChance = 1;
            int maxHealth = 120;
            int roarHealing = 6;
            int healingChance;

            healingChance = random.Next(minChance, maxChance + 1);

            if (healingChance == 3 && Health < maxHealth && Health > 0)
            {
                Health += roarHealing;
            }
        }

        public override void UseAbility()
        {
            IndividualAbility();
        }

        public override Warrior Clone()
        {
            return new Viking();
        }
    }

    class Battle
    {
        private Warrior _firstWarrior;
        private Warrior _secondWarrior;

        private List<Warrior> _warriors = new List<Warrior>();

        public Battle()
        {
            CreateWariors();
        }

        public void CreateWariors()
        {
            Assassin assassin = new Assassin();
            Berserk berserk = new Berserk();
            Knight knight = new Knight();
            Samurai samurai = new Samurai();
            Viking viking = new Viking();

            _warriors.Add(assassin);
            _warriors.Add(berserk);
            _warriors.Add(knight);
            _warriors.Add(samurai);
            _warriors.Add(viking);
        }

        public void ShowInfo()
        {
            foreach (Warrior warrior in _warriors)
            {
                warrior.ShowWarriors();
            }
        }

        public void Fight()
        {
            bool isWorking = true;

            ShowInfo();

            while (isWorking)
            {
                if (TryChooseFirstWarrior(out _firstWarrior) == false || TryChooseSecondWarrior(out _secondWarrior) == false)
                {
                    Console.Write("Введено некорректное значение. Попробуй еще раз: ");
                }

                Console.ReadKey();

                while (_firstWarrior.Health > 0 && _secondWarrior.Health > 0)
                {
                    _firstWarrior.MakeAttack(_secondWarrior);
                    _firstWarrior.UseAbility();
                    _secondWarrior.MakeAttack(_firstWarrior);
                    _secondWarrior.UseAbility();
                    Console.WriteLine($"{_firstWarrior.Name} здоровье {_firstWarrior.Health} <---> {_secondWarrior.Name} здоровье {_secondWarrior.Health}");
                }

                isWorking = false;
            }

            if (_firstWarrior.Health > 0 && _secondWarrior.Health <= 0)
            {
                Console.WriteLine($"{_firstWarrior.Name} - победил.");
            }
            else if (_firstWarrior.Health <= 0 && _secondWarrior.Health > 0)
            {
                Console.WriteLine($"{_secondWarrior.Name} - победил.");
            }
            else if (_firstWarrior.Health <= 0 && _secondWarrior.Health <= 0)
            {
                Console.WriteLine("Ничья");
            }
        }

        private bool TryChooseWarriors(out Warrior warriors)
        {
            bool isWorking = true;

            warriors = null;

            while (isWorking)
            {
                string userInput = Console.ReadLine();

                if (int.TryParse(userInput, out int result))
                {
                    int index = result - 1;

                    if (index >= 0 && index < _warriors.Count)
                    {
                        warriors = _warriors[index].Clone();

                        return true;
                    }

                    return false;
                }
                else
                {
                    Console.WriteLine("Такого гладиатора нет");
                }
            }

            Console.ReadKey();
            Console.Clear();

            return false;
        }

        private bool TryChooseFirstWarrior(out Warrior warrior)
        {
            Console.Write("\nВыберете первого гладиатора: ");

            return TryChooseWarriors(out warrior);
        }

        private bool TryChooseSecondWarrior(out Warrior warrior)
        {
            Console.Write("Выберете второго гладиатора: ");

            return TryChooseWarriors(out warrior);
        }
    }
}
